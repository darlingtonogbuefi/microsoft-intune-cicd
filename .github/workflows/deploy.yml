name: Deploy Azure DevOps Agent Resources

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      vm_ip: ${{ steps.get_ip.outputs.vm_ip }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Create Resource Group for TF State
        run: |
          echo "Creating Resource Group for Terraform state..."
          az group create --name tfstate-rg --location eastus || echo "Resource group already exists"

      - name: Create Storage Account for TF State
        run: |
          echo "Creating Storage Account for Terraform state..."
          az storage account create \
            --name tfstatestorage946 \
            --resource-group tfstate-rg \
            --location eastus \
            --sku Standard_LRS \
            --kind StorageV2 \
            || echo "Storage account already exists"

      - name: Get Storage Account Key
        id: get_key
        run: |
          echo "Fetching storage account key..."
          echo "key=$(az storage account keys list --resource-group tfstate-rg --account-name tfstatestorage946 --query '[0].value' -o tsv)" >> $GITHUB_OUTPUT

      - name: Create Blob Container for TF State
        run: |
          echo "Creating blob container for Terraform state..."
          az storage container create \
            --name tfstate \
            --account-name tfstatestorage946 \
            --account-key ${{ steps.get_key.outputs.key }} \
            || echo "Container already exists"

      - name: Terraform Init
        env:
          ARM_ACCESS_KEY: ${{ steps.get_key.outputs.key }}
        run: |
          echo "Initializing Terraform..."
          terraform init -input=false

      - name: Terraform Apply
        env:
          TF_LOG: DEBUG
          TF_LOG_PATH: ./terraform.log

          ARM_ACCESS_KEY: ${{ steps.get_key.outputs.key }}
          ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
          ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}

          TF_VAR_subscription_id: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
          TF_VAR_client_id: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          TF_VAR_client_secret: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
          TF_VAR_tenant_id: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
          TF_VAR_admin_username: ${{ secrets.VM_ADMIN_USERNAME }}
          TF_VAR_admin_password: ${{ secrets.VM_ADMIN_PASSWORD }}

        run: |
          set -o pipefail   # <- ensures pipeline fails if any command fails
          terraform -chdir=terraform init -input=false -backend=true
          terraform -chdir=terraform apply -auto-approve -input=false -var-file=terraform.tfvars 2>&1 | tee terraform-output.log
          echo "Terraform deploy completed"

      - name: Get VM Public IP
        id: get_ip
        working-directory: terraform
        env:
          ARM_ACCESS_KEY: ${{ steps.get_key.outputs.key }}
          ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
          ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
        run: |
          echo "Retrieving raw Terraform output..."
          RAW_IP=$(terraform output -raw agent_public_ip)
          echo "Raw IP output start>>"
          echo "$RAW_IP" | cat -A
          echo "<<Raw IP output end"

          CLEANED_IP=$(echo "$RAW_IP" | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1)
          echo "Cleaned IP: $CLEANED_IP"

          echo "vm_ip<<EOF" >> $GITHUB_OUTPUT
          echo "$CLEANED_IP" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT


      - name: Debug IP Output
        run: |
          echo "Retrieved VM IP: ${{ steps.get_ip.outputs.vm_ip }}"

      - name: Test WinRM port connectivity
        continue-on-error: true
        run: |
          echo "Testing WinRM connectivity..."
          nc -zv ${{ steps.get_ip.outputs.vm_ip }} 5985 || echo "Port 5985 is not reachable (yet)"

      - name: Create Ansible inventory file
        run: |
          echo "[windows]" > hosts.ini
          echo "${{ steps.get_ip.outputs.vm_ip }}" >> hosts.ini
          echo "" >> hosts.ini
          echo "[windows:vars]" >> hosts.ini
          echo "ansible_user=${{ secrets.VM_ADMIN_USERNAME }}" >> hosts.ini
          echo "ansible_port=5985" >> hosts.ini
          echo "ansible_password=${{ secrets.VM_ADMIN_PASSWORD }}" >> hosts.ini
          echo "ansible_connection=winrm" >> hosts.ini
          echo "ansible_winrm_transport=basic" >> hosts.ini
          echo "ansible_winrm_server_cert_validation=ignore" >> hosts.ini
          echo "--- hosts.ini content ---"
          cat hosts.ini

      - name: Install Ansible and dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install ansible pywinrm

      - name: Install tools via Ansible
        run: |
          ansible-playbook install-tools.yml -i hosts.ini


